name: Build Revanced
on: [workflow_call, workflow_dispatch]

jobs:
  run:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-java@v3.5.1
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
          submodules: true

      - name: Get next version code
        id: next_ver_code
        run: |
          TAG=$(git tag --sort=creatordate | tail -1)
          # fetch it from github
          # TAG=$(wget https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest -O- | tr -d ' ' | sed -n 's/.*"tag_name":"\(.*\)".*/\1/p')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo ::set-output name=NEXT_VER_CODE::$((TAG + 1))

      - name: Build Modules/APKs
        run: ./build.sh build
        env:
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - id: get_output
        run: |
          echo -e "\n[revanced-magisk-module repo]($GITHUB_SERVER_URL/E85Addict/revanced-magisk-module)" >>build.log
          BUILD_LOG=$(cat build.log)
          BUILD_LOG="${BUILD_LOG//'%'/'%25'}"
          BUILD_LOG="${BUILD_LOG//$'\n'/'%0A'}"
          BUILD_LOG="${BUILD_LOG//$'\r'/'%0D'}"

          echo ::set-output name=BUILD_LOG::$BUILD_LOG
          rm -rf revanced-cache temp # left over junk.
          cd build
          yt_op=$(find . -maxdepth 1 -name "youtube-revanced-magisk-*.zip" -printf '%P')
          echo ::set-output name=YT_OUTPUT::$yt_op
          if [ -z "$yt_op" ]; then
            echo ::set-output name=RELEASE_NAME::"Revanced APKs"
          else
            echo ::set-output name=RELEASE_NAME::$yt_op
          fi
          echo ::set-output name=TT_OUTPUT::$(find . -maxdepth 1 -name "tiktok-revanced-magisk-*.zip" -printf '%P')
          echo ::set-output name=RDT_OUTPUT::$(find . -maxdepth 1 -name "reddit-revanced-magisk-*.zip" -printf '%P')
          echo ::set-output name=TW_OUTPUT::$(find . -maxdepth 1 -name "twitter-revanced-magisk-*.zip" -printf '%P')
          echo ::set-output name=MUSIC_OUTPUT_ARM64::$(find . -maxdepth 1 -name "music-revanced-magisk-*-arm64-v8a.zip" -printf '%P')
          echo ::set-output name=MUSIC_OUTPUT_ARM::$(find . -maxdepth 1 -name "music-revanced-magisk-*-arm-v7a.zip" -printf '%P')
          echo ::set-output name=SP_OUTPUT::$(find . -maxdepth 1 -name "spotify-revanced-magisk-*.zip" -printf '%P')

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@2.3.0
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ${{ steps.get_output.outputs.RELEASE_NAME }}
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: false

      - name: Switch to update branch
        run: git checkout -f update || git switch --discard-changes --orphan update

      - name: Update changelog and Magisk update jsons
        id: update_config
        run: |
          cp -f build.log latest_build.md
          CHANGELOG_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/latest_build.md"
          get_update_json() {
            echo "{
            \"version\": \"v$1\",
            \"versionCode\": $2,
            \"zipUrl\": \"$3\",
            \"changelog\": \"$4\"
          }"
          }
          if [ -n "${{ steps.get_output.outputs.YT_OUTPUT }}" ]; then
            YT_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*YouTube version: \(.*\)/\1/p')
            YT_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YT_OUTPUT }}"
            UPDATE_YT_JSON=$(get_update_json "$YT_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}" "$YT_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_YT_JSON" >yt-update.json
          fi

          if [ -n "${{ steps.get_output.outputs.TT_OUTPUT }}" ]; then
            TT_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*TikTok version: \(.*\)/\1/p')
            TT_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.TT_OUTPUT }}"
            UPDATE_TT_JSON=$(get_update_json "$TT_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}" "$TT_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_TT_JSON" >tt-update.json
          fi

          if [ -n "${{ steps.get_output.outputs.RDT_OUTPUT }}" ]; then
            RDT_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Reddit version: \(.*\)/\1/p')
            RDT_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.RDT_OUTPUT }}"
            UPDATE_RDT_JSON=$(get_update_json "$RDT_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}" "$RDT_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_RDT_JSON" >rdt-update.json
          fi

          if [ -n "${{ steps.get_output.outputs.TW_OUTPUT }}" ]; then
            TW_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Twitter version: \(.*\)/\1/p')
            TW_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.TW_OUTPUT }}"
            UPDATE_TW_JSON=$(get_update_json "$TW_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}" "$TW_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_TW_JSON" >tw-update.json
          fi

          if [ -n "${{ steps.get_output.outputs.MUSIC_OUTPUT_ARM64 }}" ]; then
            MUSIC_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Music (arm64-v8a) version: \(.*\)/\1/p')
            MUSIC_ARM64_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.MUSIC_OUTPUT_ARM64 }}"
            UPDATE_MUSIC_ARM64_JSON=$(get_update_json "$MUSIC_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}" "$MUSIC_ARM64_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_MUSIC_ARM64_JSON" >music-update-arm64-v8a.json
          fi

          if [ -n "${{ steps.get_output.outputs.MUSIC_OUTPUT_ARM }}" ]; then
            MUSIC_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Music (arm-v7a) version: \(.*\)/\1/p')
            MUSIC_ARM_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.MUSIC_OUTPUT_ARM }}"
            UPDATE_MUSIC_ARM_JSON=$(get_update_json "$MUSIC_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}" "$MUSIC_ARM_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_MUSIC_ARM_JSON" >music-update-arm-v7a.json
          fi

          if [ -n "${{ steps.get_output.outputs.SP_OUTPUT }}" ]; then
            SP_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Spotify version: \(.*\)/\1/p')
            SP_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.SP_OUTPUT }}"
            UPDATE_SP_JSON=$(get_update_json "$SP_VER" "${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}" "$SP_DLURL" "$CHANGELOG_URL")
            echo "$UPDATE_SP_JSON" >sp-update.json
          fi

          if [ ! -f *.json ]; then : >dummy.json; fi

      - uses: stefanzweifel/git-auto-commit-action@v4.15.0
        with:
          branch: update
          skip_checkout: true
          file_pattern: latest_build.md *.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
